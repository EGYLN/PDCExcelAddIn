using System.Net;
using System.Web.Services.Protocols;
using BBS.ST.BHC.BSP.PDC.Lib.Util;

namespace BBS.ST.BHC.BSP.PDC.Lib
{
  /// <summary>
  /// Initializes a web service client class that is generated by VisualStudio to access a PSCS web service.
  /// </summary>
  public class WebServiceClientInitializer
  {
    #region constructor

      #endregion

    #region methods

    #region InitializeWebServiceClient
    /// <summary>
    /// Initializes the web service client to connect to a PSCS web service using the 
    /// provided service URL, application user and license
    /// </summary>
    /// <param name="aWebServiceClient">The web service client to initialize</param>
    /// <param name="aURL">The physical URL where the web service is running (see also wsdl:port element, 
    /// SOAP service binding respectivly)</param>
    /// <param name="aApplicationUser">In order to use a PSCS web service, an application user is needed</param>
    /// <param name="aLicence">In order to use a PSCS web service, a licence file is neeeded</param>
    public void InitializeWebServiceClient(SoapHttpClientProtocol aWebServiceClient, string aURL, string aApplicationUser, string aLicence)
    {
        ServicePointManager.SecurityProtocol = (SecurityProtocolType)(0xc0 | 0x300 | 0xc00);
        PDCLogger.TheLogger.LogDebugMessage(PDCLogger.LOG_NAME_LIB, "Initialized SecurityProtocol to " + ServicePointManager.SecurityProtocol);
        PDCLogger.TheLogger.LogDebugMessage(PDCLogger.LOG_NAME_LIB, "Initializing connection to " + aURL);
      //use application user and licence file a HTTP credentials
      if (aApplicationUser != null)
      {
        aWebServiceClient.Credentials = new NetworkCredential(aApplicationUser, aLicence);
        aWebServiceClient.PreAuthenticate = true;
      }
      //set web service url
      aWebServiceClient.Url = aURL;
      //Proxy handling is now implemented in the GetRequest methods of the stubs due to problems
      //with the Schering Proxy configuration

      //add authority part of the URL to list of local server names if this is necessary
      //WebProxy tmpProxy = WebProxy.GetDefaultProxy();
      //Uri tmpUri = new Uri(aURL);
      //if (!tmpProxy.IsBypassed(tmpUri))
      //{
      //  tmpProxy.BypassArrayList.Add(tmpUri.Authority);
      //  aWebServiceClient.Proxy = tmpProxy;
      //}
    }

    /// <summary>
    /// Initializes the web service client to connect to a PSCS web service using the default 
    /// URL of the generated client class Using the default URL only works, if the WSDL file that was used for 
    /// generating the client contains a valid port binding element with the valid physical URL of the service. 
    /// This is not the case for the early PSCS web services.
    /// </summary>
    /// <param name="aWebServiceClient">The web service client to initialize</param>
    /// <param name="aApplicationUser">In order to use a PSCS web service, an application user is needed</param>
    /// <param name="aLicence">In order to use a PSCS web service, a licence file is neeeded</param>
    public void InitializeWebServiceClient(SoapHttpClientProtocol aWebServiceClient, string aApplicationUser, string aLicence)
    {
            //ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11;

            InitializeWebServiceClient(aWebServiceClient, aWebServiceClient.Url, aApplicationUser, aLicence);
    }

    /// <summary>
    /// Initializes the provided web service client to connect to a PSCS web service using the default 
    /// URL of the generated client class Using the default URL only works, if the WSDL file that was used for 
    /// generating the client contains a valid port binding element with the valid physical URL of the service. 
    /// This is not the case for the early PSCS web services.
    /// </summary>
    /// <param name="aWebServiceProxy">The web service client to initialize</param>
    public void InitializeWebServiceClient(SoapHttpClientProtocol aWebServiceProxy)
    {
      InitializeWebServiceClient(aWebServiceProxy, aWebServiceProxy.Url, null, null);
    }
    #endregion

    #endregion
  }
}
